10 20 30 40 50 -1 60 -1 -1 -1 -1 -1 -1
#include <bits/stdc++.h>  // স্ট্যান্ডার্ড হেডার ফাইল যেখানে এল্গোরিদম এবং ডেটা স্ট্রাকচার লাইব্রেরি আছে।
using namespace std;

void solve(int ar1[], int ar2[], int n, int x, int ans[])
{
    int a = 0, b = 0, k = 0;  // তিনটি ইন্ডেক্স ভেরিয়েবল: a টি প্রথম আরের ইন্ডেক্স, b টি দ্বিতীয় আরের ইন্ডেক্স, k টি ans আরের ইন্ডেক্স
    while (a < n && b < x)
    {
        if (ar1[a] > ar2[b])  // প্রথম আরের মৌলিক উপাদানটি দ্বিতীয় আরের মৌলিক উপাদানের চেয়ে বড় হলে
        {
            ans[k++] = ar1[a++];  // প্রথম আরের মৌলিক উপাদানটিকে ans আরে তে সংরক্ষণ করে এবং তারপর a এবং k বাড়ানো হবে
        }
        else
        {
            ans[k++] = ar2[b++];  // দ্বিতীয় আরের মৌলিক উপাদানটিকে ans আরে তে সংরক্ষণ করে এবং তারপর b এবং k বাড়ানো হবে
        }
    }
    while (a < n)
    {
        ans[k++] = ar1[a++];  // যতক্ষণ প্রথম আরের সব উপাদান আরে ans এ সংরক্ষণ হয় নাই, ততক্ষণ তাদের ans আরে এ সংরক্ষণ করতে থাকবে
    }
    while (b < x)
    {
        ans[k++] = ar2[b++];  // যতক্ষণ দ্বিতীয় আরের সব উপাদান আরে ans এ সংরক্ষণ হয় নাই, ততক্ষণ তাদের ans আরে এ সংরক্ষণ করতে থাকবে
    }
}

int main()
{
    int n;
    cin >> n;  // প্রথম আরের উপাদান সংখ্যা পড়তে থাকবে
    int ar1[n];
    for (int i = 0; i < n; i++)
    {
        cin >> ar1[i];  // প্রথম আরের উপাদানগুলি পড়তে থাকবে
    }

    int x;
    cin >> x;  // দ্বিতীয় আরের উপাদান সংখ্যা পড়তে থাকবে 
    int ar2[x];
    for (int i = 0; i < x; i++)
    {
        cin >> ar2[i];  // দ্বিতীয় আরের উপাদানগুলি পড়তে থাকবে
    }
    int ans[n + x];  // ans আরে এ প্রতিটি উপাদান জমা করতে হবে
    solve(ar1, ar2, n, x, ans);
